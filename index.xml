<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Home</title><link>https://hashimcolombowala.com/</link><description>Recent content on Home</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>hashim@hey.com (Hashim Colombowala)</managingEditor><webMaster>hashim@hey.com (Hashim Colombowala)</webMaster><copyright>Â©2024, All Rights Reserved</copyright><lastBuildDate>Mon, 07 Oct 2024 23:00:00 -0700</lastBuildDate><atom:link href="https://hashimcolombowala.com/index.xml" rel="self" type="application/rss+xml"/><item><title>What is flink and why should we care about it</title><link>https://hashimcolombowala.com/posts/2024-10-08-kafka-flink/</link><pubDate>Mon, 07 Oct 2024 23:00:00 -0700</pubDate><author>hashim@hey.com (Hashim Colombowala)</author><atom:modified>Mon, 07 Oct 2024 23:00:00 -0700</atom:modified><guid>https://hashimcolombowala.com/posts/2024-10-08-kafka-flink/</guid><description>&lt;h3 id="overview">Overview&lt;/h3>
&lt;p>Recently, the observability team was tasked with a latency reporting project. The key features included:&lt;/p>
&lt;ul>
&lt;li>Daily and monthly latency aggregations&lt;/li>
&lt;li>Support for various quantiles&lt;/li>
&lt;li>A reasonable data delay SLO (24 hours)&lt;/li>
&lt;/ul>
&lt;p>and more. For the purpose of this blog, we will focus on the data processing aspect. We needed a system that could read latency data from a Kafka stream, partition the data by various attributes such as endpoints, and precompute hourly, daily, and weekly quantiles (e.g., p50, p99).&lt;/p></description><dc:creator>Hashim Colombowala</dc:creator><category>flink</category><category>kotlin</category></item><item><title>Learning Generics by extending the prometheus python client</title><link>https://hashimcolombowala.com/posts/generics/</link><pubDate>Sat, 02 Jul 2022 14:30:00 +0000</pubDate><author>hashim@hey.com (Hashim Colombowala)</author><atom:modified>Sat, 02 Jul 2022 14:30:00 +0000</atom:modified><guid>https://hashimcolombowala.com/posts/generics/</guid><description>&lt;h2 id="background">Background&lt;/h2>
&lt;p>Imagine you&amp;rsquo;re writing a library to extend the &lt;a href="https://github.com/prometheus/client_python">prometheus python client&lt;/a> and you needed to add some dynamic labels specific to the environment. Ideally you would add most of your labels at the collector end and avoid writing extensions.&lt;/p></description><dc:creator>Hashim Colombowala</dc:creator><category>python</category><category>o11y</category></item><item><title>Designing a metrics system notes</title><link>https://hashimcolombowala.com/posts/metrics/</link><pubDate>Fri, 01 Jul 2022 01:33:40 +0000</pubDate><author>hashim@hey.com (Hashim Colombowala)</author><atom:modified>Fri, 01 Jul 2022 01:33:40 +0000</atom:modified><guid>https://hashimcolombowala.com/posts/metrics/</guid><description>&lt;h2 id="requirements-for-metrics-system">Requirements for metrics system&lt;/h2>
&lt;ul>
&lt;li>Multidimensional data model which can be sliced and diced along different dimensions as defined by the service(example: instance, service, endpoint, method)&lt;/li>
&lt;li>Operational simplicity&lt;/li>
&lt;li>Scalable data collection and decentralized architecture, so that independent teams can setup independent monitoring servers&lt;/li>
&lt;li>A powerful query language that leverages the data model for alerting and graphing&lt;/li>
&lt;/ul>
&lt;h2 id="client-libraries">Client libraries&lt;/h2>
&lt;ul>
&lt;li>Client libraries take care of all the nitty gritty details like thread-safety, bookkeeping and producing the Prometheus text exposition format in response to HTTP request.&lt;/li>
&lt;li>As metrics-based monitoring does not track individual events, client library memory usage does not increase the more events you have. Rather, memory is related to the number of metrics you have.&lt;/li>
&lt;/ul>
&lt;h2 id="instrumentation">Instrumentation&lt;/h2>
&lt;p>There are 3 types of services&lt;/p></description><dc:creator>Hashim Colombowala</dc:creator><category>python</category><category>o11y</category></item><item><title>Authentication - Session or Token?</title><link>https://hashimcolombowala.com/posts/auth/</link><pubDate>Fri, 18 Jun 2021 12:33:40 +0000</pubDate><author>hashim@hey.com (Hashim Colombowala)</author><atom:modified>Fri, 18 Jun 2021 12:33:40 +0000</atom:modified><guid>https://hashimcolombowala.com/posts/auth/</guid><description>&lt;p>This post will compare and contrast two most common authentication techniques breifly.&lt;/p>
&lt;h2 id="session-based-authentication">Session Based Authentication&lt;/h2>
&lt;p>In this scenario, the server will create a session for the user after the user logs in. The server creates a &lt;code>session id&lt;/code> which is stored in memory or in an external cache for horizontal scaling. The client stores the session id in a &lt;code>cookie&lt;/code> and sends the it in the request header for every subsequent request.&lt;/p></description><dc:creator>Hashim Colombowala</dc:creator><category>python</category></item><item><title>Signalling docker containers</title><link>https://hashimcolombowala.com/posts/signal/</link><pubDate>Wed, 27 Jan 2021 01:33:40 +0000</pubDate><author>hashim@hey.com (Hashim Colombowala)</author><atom:modified>Wed, 27 Jan 2021 01:33:40 +0000</atom:modified><guid>https://hashimcolombowala.com/posts/signal/</guid><description>&lt;p>When deploying a containerized application to a container management system like AWS Fargate, you tend to run your application from a shell script. Suppose your script looks like this&lt;/p></description><dc:creator>Hashim Colombowala</dc:creator><category>python</category><category>docker</category></item><item><title>Abstract classes using Metaclasses</title><link>https://hashimcolombowala.com/posts/2020-12-28-python-metaclasses/</link><pubDate>Mon, 28 Dec 2020 01:33:40 +0000</pubDate><author>hashim@hey.com (Hashim Colombowala)</author><atom:modified>Mon, 28 Dec 2020 01:33:40 +0000</atom:modified><guid>https://hashimcolombowala.com/posts/2020-12-28-python-metaclasses/</guid><description>&lt;p>In python3 all classes are new style classes, thus it is reasonable to refer to an objects type and its class interchangably&lt;/p>
&lt;h3 id="type-and-class">Type and Class&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Foo&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Foo&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="nc">type&lt;/span>&lt;span class="s1">&amp;#39;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Type is a metaclass of which classes are instances&lt;/p></description><dc:creator>Hashim Colombowala</dc:creator><category>python</category></item><item><title>The Go Spec(compiling)</title><link>https://hashimcolombowala.com/posts/2020-06-20-the-go-spec/</link><pubDate>Sat, 20 Jun 2020 16:00:00 -0700</pubDate><author>hashim@hey.com (Hashim Colombowala)</author><atom:modified>Sat, 20 Jun 2020 16:00:00 -0700</atom:modified><guid>https://hashimcolombowala.com/posts/2020-06-20-the-go-spec/</guid><description>&lt;p>The Go compiler can compile the Go source go with different go specs. Fo example, if you have installed go 1.14, you can compile your source with &lt;code>Go spec 1.13&lt;/code>.&lt;/p></description><dc:creator>Hashim Colombowala</dc:creator><category>go</category></item><item><title>The Zen of Python</title><link>https://hashimcolombowala.com/posts/2020-04-17-zen-of-python/</link><pubDate>Tue, 07 Apr 2020 18:54:00 -0700</pubDate><author>hashim@hey.com (Hashim Colombowala)</author><atom:modified>Tue, 07 Apr 2020 18:54:00 -0700</atom:modified><guid>https://hashimcolombowala.com/posts/2020-04-17-zen-of-python/</guid><description>&lt;p>Words of wisdom from the python interactive shell. Always good to read it once in a while and appreciate the zen of python.&lt;/p>
&lt;p>Open the python interpretor and enter &lt;code>import this&lt;/code>&lt;/p></description><dc:creator>Hashim Colombowala</dc:creator></item><item><title/><link>https://hashimcolombowala.com/resume/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>hashim@hey.com (Hashim Colombowala)</author><guid>https://hashimcolombowala.com/resume/</guid><description>&lt;h1 id="hashim-colombowala">Hashim Colombowala&lt;/h1>
&lt;h2 id="core-experience">Core experience&lt;/h2>
&lt;ul>
&lt;li>Building and deploying containerized applications to AWS EKS/Fargate. Core knowledge of AWS services and infrastructure.&lt;/li>
&lt;li>Observability Systems: Logging (ELK), Metrics(Prometheus) and Tracing(OTEL). Library support for python and kotlin services with web, rpc, celery, batch and kafka components. Deployment to AWS EKS Kubernetes.&lt;/li>
&lt;li>Building scalable APIs and data models&lt;/li>
&lt;li>Experience with software release management.&lt;/li>
&lt;li>Highly knowledgeable with CI/CD systems like Buildkite, Jenkins and Drone.&lt;/li>
&lt;/ul>
&lt;h2 id="technical-skills">Technical Skills&lt;/h2>
&lt;h3 id="toolset">Toolset&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Languages: Python, Kotlin, Golang, Bash, Groovy&lt;/p></description><dc:creator>Hashim Colombowala</dc:creator></item></channel></rss>