<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>O11y on Hashim Colombowala</title><link>https://hashimcolombowala.com/tags/o11y/</link><description>Recent content in O11y on Hashim Colombowala</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 26 Nov 2024 06:49:00 -0700</lastBuildDate><atom:link href="https://hashimcolombowala.com/tags/o11y/index.xml" rel="self" type="application/rss+xml"/><item><title>Delta vs. Cumulative Metrics: Key Differences and System Preferences</title><link>https://hashimcolombowala.com/p/delta/</link><pubDate>Tue, 26 Nov 2024 06:49:00 -0700</pubDate><guid>https://hashimcolombowala.com/p/delta/</guid><description>&lt;img src="https://hashimcolombowala.com/p/delta/metrics.jpg" alt="Featured image of post Delta vs. Cumulative Metrics: Key Differences and System Preferences" />&lt;p>When it comes to collecting and analyzing metrics, one crucial decision is whether to use &lt;strong>delta&lt;/strong> or &lt;strong>cumulative&lt;/strong> metrics. These two approaches define how measurements are reported over time, and different metrics systems have their preferences based on their design and use cases. In this blog post, we’ll explore the difference between delta and cumulative metrics, examine their trade-offs, and highlight the systems that prefer one over the other.&lt;/p>
&lt;h3 id="understanding-temporality">&lt;strong>Understanding Temporality&lt;/strong>
&lt;/h3>&lt;p>Temporality refers to the way metrics are recorded and reported over time. Choosing the right temporality depends on your monitoring backend and analytical needs.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Cumulative Temporality&lt;/strong>: Reports the running total of a metric from the beginning of a measurement period. Suitable for tracking trends and totals. Example: Total bytes transferred over time (&lt;a class="link" href="https://grafana.com/blog/2024/11/25/how-to-use-opentelemetry-and-grafana-alloy-to-convert-delta-to-cumulative-at-scale/" target="_blank" rel="noopener"
>source&lt;/a>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Delta Temporality&lt;/strong>: Reports the difference in value for a metric since the last measurement. Ideal for real-time insights into changes over intervals. Example: Number of requests processed per interval (&lt;a class="link" href="https://opentelemetry.io/docs/concepts/metric-temporality/" target="_blank" rel="noopener"
>source&lt;/a>).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>OpenTelemetry&lt;/strong> provides flexibility by supporting both delta and cumulative metrics. This allows observability platforms to choose a model that aligns with their architecture (&lt;a class="link" href="https://opentelemetry.io/" target="_blank" rel="noopener"
>learn more&lt;/a>).&lt;/p>
&lt;p>&lt;strong>Cumulative Metrics&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>These represent the total value accumulated from the start of the measurement up to the current point.&lt;/li>
&lt;li>Every reported value includes all previous measurements, providing a running total.&lt;/li>
&lt;li>Example:
&lt;ul>
&lt;li>At time t0: 5&lt;/li>
&lt;li>At time t0+10s: 10&lt;/li>
&lt;li>At time t0+20s: 20&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://prometheus.io/docs/concepts/metric_types/#counter" target="_blank" rel="noopener"
>Prometheus documentation explains how cumulative counters are processed&lt;/a>.&lt;/li>
&lt;li>&lt;strong>Use case&lt;/strong>: Cumulative metrics are ideal when you need a holistic view of total occurrences, such as the total number of requests or errors since the application started. They also help mitigate data loss because missed intervals can still be accounted for in subsequent reports.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Delta Metrics&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Delta metrics report only the change in value since the last measurement.&lt;/li>
&lt;li>Each value reflects the increment or decrement during a specific reporting interval.&lt;/li>
&lt;li>Example:
&lt;ul>
&lt;li>At time t0: 5&lt;/li>
&lt;li>At time t0+10s: 5&lt;/li>
&lt;li>At time t0+20s: 10&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://opentelemetry.io/docs/reference/specification/metrics/data-model/#temporality" target="_blank" rel="noopener"
>Learn more about delta metrics and how they&amp;rsquo;re handled in OpenTelemetry&lt;/a>.&lt;/li>
&lt;li>&lt;strong>Use case&lt;/strong>: Delta metrics are great for analyzing the rate of change over specific intervals. They’re especially useful in systems designed for high-frequency reporting where capturing incremental updates is more efficient.&lt;/li>
&lt;/ul>
&lt;h3 id="key-differences-between-delta-and-cumulative-metrics">&lt;strong>Key Differences Between Delta and Cumulative Metrics&lt;/strong>
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Feature&lt;/th>
&lt;th>Cumulative Metrics&lt;/th>
&lt;th>Delta Metrics&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Representation&lt;/strong>&lt;/td>
&lt;td>Running total since the start&lt;/td>
&lt;td>Increment since the last report&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Data Loss Handling&lt;/strong>&lt;/td>
&lt;td>Resilient to missed intervals&lt;/td>
&lt;td>Data may be lost if intervals are missed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Rate Calculation&lt;/strong>&lt;/td>
&lt;td>Requires backend calculations&lt;/td>
&lt;td>Directly provides the rate per interval&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Overhead&lt;/strong>&lt;/td>
&lt;td>More storage-intensive for long periods&lt;/td>
&lt;td>More efficient for short intervals&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="metrics-systems-and-their-preferences">&lt;strong>Metrics Systems and Their Preferences&lt;/strong>
&lt;/h3>&lt;h4 id="metrics-systems-using-cumulative-metrics">&lt;strong>Metrics Systems Using Cumulative Metrics&lt;/strong>
&lt;/h4>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Prometheus&lt;/strong>: Cumulative metrics are the default. Counters track the total value over time, and functions like &lt;code>rate()&lt;/code> derive per-second rates.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Google Cloud Monitoring&lt;/strong>: Uses cumulative metrics to represent continuous totals, like the number of requests served.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Amazon CloudWatch&lt;/strong>: Designed around cumulative metrics, with built-in support for rate and delta calculations.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="metrics-systems-using-delta-metrics">&lt;strong>Metrics Systems Using Delta Metrics&lt;/strong>
&lt;/h4>&lt;ol>
&lt;li>
&lt;p>&lt;strong>OpenTelemetry (OTLP)&lt;/strong>: Delta temporality is supported for certain metric types, allowing granular reporting over intervals.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>StatsD&lt;/strong>: Metrics like counters are reported as deltas, focusing on changes during the last interval for lightweight and efficient ingestion.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Datadog&lt;/strong>: Prefers delta metrics for some integrations to provide detailed visibility into per-second rates.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="systems-supporting-both-delta-and-cumulative-metrics">&lt;strong>Systems Supporting Both Delta and Cumulative Metrics&lt;/strong>
&lt;/h4>&lt;ol>
&lt;li>
&lt;p>&lt;strong>OpenTelemetry&lt;/strong>: Provides flexibility by allowing users to configure metrics as either cumulative or delta.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Grafana Mimir and Cortex&lt;/strong>: While aligned with Prometheus&amp;rsquo; cumulative approach, these systems can process both formats.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Elastic Observability&lt;/strong>: Supports both, though cumulative metrics are more effective for long-term storage and trend analysis.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Splunk Observability Cloud&lt;/strong>: Handles both delta and cumulative metrics, adapting to the data source requirements.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="choosing-the-right-temporality">&lt;strong>Choosing the Right Temporality&lt;/strong>
&lt;/h3>&lt;p>When deciding between delta and cumulative metrics, consider the following:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>System Compatibility&lt;/strong>: Some systems (e.g., Prometheus) work better with cumulative metrics, while others (e.g., StatsD) prefer deltas.&lt;/li>
&lt;li>&lt;strong>Data Loss Resilience&lt;/strong>: Cumulative metrics are more forgiving when intervals are missed.&lt;/li>
&lt;li>&lt;strong>Analysis Needs&lt;/strong>: Use delta metrics for fine-grained interval analysis and cumulative metrics for overall trends and totals.&lt;/li>
&lt;/ul>
&lt;h3 id="further-reading-and-sources">&lt;strong>Further Reading and Sources&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://opentelemetry.io/docs/reference/specification/metrics/data-model/#temporality" target="_blank" rel="noopener"
>OpenTelemetry Metric Data Model&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://prometheus.io/docs/concepts/metric_types/" target="_blank" rel="noopener"
>Prometheus Metric Types and Temporality&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://grafana.com/blog/2024/11/25/how-to-use-opentelemetry-and-grafana-alloy-to-convert-delta-to-cumulative-at-scale/" target="_blank" rel="noopener"
>Grafana Blog: Converting Delta to Cumulative Metrics&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://cloud.google.com/monitoring/docs/concepts/metric-types" target="_blank" rel="noopener"
>Google Cloud Monitoring and Metric Temporality&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Another Off-by-One (Mostly) Problem and Prometheus Counter Spikes</title><link>https://hashimcolombowala.com/p/another-off-by-one-mostly-problem-and-prometheus-counter-spikes/</link><pubDate>Wed, 09 Oct 2024 21:00:00 -0700</pubDate><guid>https://hashimcolombowala.com/p/another-off-by-one-mostly-problem-and-prometheus-counter-spikes/</guid><description>&lt;h3 id="the-problem">The Problem
&lt;/h3>&lt;p>We have observed several Prometheus counters showing false spikes (i.e., no matching increase in logs) that could correlate with nodes experiencing kernel panics and reboots.&lt;/p>
&lt;h3 id="why-do-counters-spike">Why Do Counters Spike?
&lt;/h3>&lt;p>In Prometheus, counters are expected to be monotonic: they can never decrease. The only time a counter timeseries can decrease is if it is reset to zero (e.g., when a container restarts).&lt;/p>
&lt;p>The PromQL functions &lt;code>increase()&lt;/code> and &lt;code>rate()&lt;/code> have special logic to handle counter resets like this. If a counter has a value of 100 and the next data point is 99, it is assumed that the timeseries was first reset to 0 and then incremented 99 more times. This would cause a jump of 99 in most graphs.&lt;/p>
&lt;p>&lt;img src="https://hashimcolombowala.com/p/another-off-by-one-mostly-problem-and-prometheus-counter-spikes/graph.png"
width="1492"
height="513"
srcset="https://hashimcolombowala.com/p/another-off-by-one-mostly-problem-and-prometheus-counter-spikes/graph_hu10347298088471375106.png 480w, https://hashimcolombowala.com/p/another-off-by-one-mostly-problem-and-prometheus-counter-spikes/graph_hu2622312036944885573.png 1024w"
loading="lazy"
alt="Graph"
class="gallery-image"
data-flex-grow="290"
data-flex-basis="698px"
>&lt;/p>
&lt;h3 id="background">Background
&lt;/h3>&lt;ul>
&lt;li>Our Python app is running on a Gunicorn server with multiple workers. This means multiple Python processes are serving requests because Python&amp;rsquo;s threading is restricted by the Global Interpreter Lock (GIL). Using multiprocessing is a good workaround.&lt;/li>
&lt;li>The app is running on a pod on a Kubernetes node.&lt;/li>
&lt;li>This app is instrumented with the Prometheus Python client in multiprocessing mode because each worker process runs independently and maintains separate metrics. Multiprocessing mode aggregates these metrics across all workers, ensuring that Prometheus scrapes produce accurate, unified data across the entire application, reflecting all requests handled by all workers.&lt;/li>
&lt;li>In multiprocessing mode, each process writes its metrics to a separate &lt;a class="link" href="https://github.com/prometheus/client_python/blob/v0.12.0/prometheus_client/mmap_dict.py#L61-L69" target="_blank" rel="noopener"
>set of mmapped files&lt;/a>. On scrape, the exporter web server reads all of these files and merges them (i.e., counters from process A and B are summed). In our Kubernetes setup, these files are stored in &lt;code>/tmp&lt;/code>, which is mounted as a Kubernetes &lt;code>emptyDir&lt;/code> volume in most of our workloads.&lt;/li>
&lt;/ul>
&lt;h3 id="how-are-reboots-causing-spikes">How Are Reboots Causing Spikes?
&lt;/h3>&lt;p>&lt;a class="link" href="https://kubernetes.io/docs/concepts/storage/volumes/#emptydir" target="_blank" rel="noopener"
>It turns out the &lt;code>emptyDir&lt;/code> mounted to &lt;code>/tmp&lt;/code> persists across container crashes&lt;/a>.&lt;/p>
&lt;p>We were able to exec into a pod that experienced a node reboot and confirmed that the filesystem timestamps in the metric files predated the node reboot by several days.&lt;/p>
&lt;p>&lt;img src="https://hashimcolombowala.com/p/another-off-by-one-mostly-problem-and-prometheus-counter-spikes/shell.png"
width="1600"
height="1303"
srcset="https://hashimcolombowala.com/p/another-off-by-one-mostly-problem-and-prometheus-counter-spikes/shell_hu13800648201417889505.png 480w, https://hashimcolombowala.com/p/another-off-by-one-mostly-problem-and-prometheus-counter-spikes/shell_hu6015823213156503612.png 1024w"
loading="lazy"
alt="Shell"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="294px"
>&lt;/p>
&lt;p>&lt;strong>This means that after a reboot, pods are coming back with their old counter values&lt;/strong>. This would normally be fine as long as the node is not down for too long—the counter would just resume at the previous value and see no reset, as long as it hasn&amp;rsquo;t fallen out of the backend aggregator&amp;rsquo;s buffer (which has a 10-minute window in our setup).&lt;/p>
&lt;p>In the backend, we drilled into the raw data points for the counter during one of the spikes and noticed it was incrementing and then decrementing by exactly one:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>TIMESTAMP&lt;/th>
&lt;th>VALUE&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2024-09-23T05:05:05.37-04:00&lt;/td>
&lt;td>72929&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2024-09-23T05:05:35.37-04:00&lt;/td>
&lt;td>72929&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2024-09-23T05:06:05.37-04:00&lt;/td>
&lt;td>72930&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2024-09-23T05:06:35.371-04:00&lt;/td>
&lt;td>72930&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2024-09-23T05:07:05.371-04:00&lt;/td>
&lt;td>72932&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2024-09-23T05:07:35.37-04:00&lt;/td>
&lt;td>72932&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2024-09-23T05:08:05.37-04:00&lt;/td>
&lt;td>72933&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2024-09-23T05:10:59.487-04:00&lt;/td>
&lt;td>72932 &lt;code>(decrease in counter)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2024-09-23T05:11:29.496-04:00&lt;/td>
&lt;td>72932&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2024-09-23T05:11:59.5-04:00&lt;/td>
&lt;td>72932&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2024-09-23T05:12:29.489-04:00&lt;/td>
&lt;td>72932&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="sequence-of-events">Sequence of Events
&lt;/h3>&lt;ol>
&lt;li>The application process increments a counter from &lt;em>n&lt;/em> to &lt;em>n+1&lt;/em> and writes the value to the mmapped file. This writes to the Linux kernel&amp;rsquo;s page cache (and is not immediately flushed to disk).&lt;/li>
&lt;li>A scrape occurs. The multiprocess exporter opens and reads all files. The kernel sees some of the files are already in the page cache and skips reading them from disk. The scrape exports the counter as &lt;em>n+1&lt;/em>.&lt;/li>
&lt;li>A kernel panic happens before the page cache is flushed to disk. The counter increment is lost.&lt;/li>
&lt;li>The node encounters a kernel panic and reboots. Since the shutdown was not graceful, pods remain assigned to the node, so after startup containers are restarted with the same pod names, etc. Since the pod name is the same, the &lt;code>emptyDir&lt;/code> volume is reused, and the pod keeps the last counter value that was flushed to disk (&lt;em>n&lt;/em>).&lt;/li>
&lt;li>A scrape occurs, and we export the counter with a value of &lt;em>n&lt;/em>. Prometheus queries run &lt;code>increase([..., n+1, n])&lt;/code>, which is interpreted as an increase of &lt;em>n&lt;/em>, causing a spike.&lt;/li>
&lt;/ol>
&lt;p>However, we have not attempted to reproduce this behavior to confirm this theory. Since this depends on the timing of the kernel writing the dirty page to disk and the kernel panic, it also makes sense that we would not see this behavior consistently with node restarts.&lt;/p>
&lt;h3 id="how-can-we-fix-it">How Can We Fix It?
&lt;/h3>&lt;p>While a fix for the node reboot issue has been identified, we can be more robust here. The simplest solution is to clear out the metric files in &lt;code>/tmp&lt;/code> on startup. Prometheus is designed for this—counter resets are normal.&lt;/p>
&lt;ol>
&lt;li>We could set the Prometheus multiproc directory to a memory-backed &lt;code>emptyDir&lt;/code> volume (&lt;code>emptyDir.medium: Memory&lt;/code>). This would naturally be cleared on node restart. This would make writes count against container memory instead.&lt;/li>
&lt;li>We could add an init container that runs &lt;code>rm $PROMETHEUS_MULTIPROC_DIR/*.db&lt;/code> on startup. This might impact pod start time slightly but is the simplest solution.&lt;/li>
&lt;li>We could make the application delete &lt;code>$PROMETHEUS_MULTIPROC_DIR/*.db&lt;/code> on startup.&lt;/li>
&lt;/ol>
&lt;h3 id="conclusion">Conclusion
&lt;/h3>&lt;p>So here we have it. An off-by-one (decrement to the count) can lead to an increment of 99. Who would have thought.&lt;/p></description></item><item><title>Learning Generics by extending the prometheus python client</title><link>https://hashimcolombowala.com/p/learning-generics-by-extending-the-prometheus-python-client/</link><pubDate>Sat, 02 Jul 2022 14:30:00 +0000</pubDate><guid>https://hashimcolombowala.com/p/learning-generics-by-extending-the-prometheus-python-client/</guid><description>&lt;p>Imagine you&amp;rsquo;re writing a library to extend the &lt;a class="link" href="https://github.com/prometheus/client_python" target="_blank" rel="noopener"
>prometheus python client&lt;/a> and you needed to add some dynamic labels specific to the environment. Ideally you would add most of your labels at the collector end and avoid writing extensions.&lt;/p>
&lt;p>Say you need to inject some dynamic labels and you will need to at some point, we may want to extend the client.&lt;/p>
&lt;h2 id="what-are-generics-and-why-do-we-use-them-in-python">What are Generics? and why do we use them in python?
&lt;/h2>&lt;p>Without sacrificing the inherent safety of a statically typed language, generic programming gives us primitives to declare “placeholder types” that allow us to focus less on the specific types that may be used or declared by other portions of the codebase, but rather focus on these higher-level patterns that can be consolidated into simpler declarations.&lt;/p>
&lt;p>Python has no built-in type checking. As long as a given Python program is syntactically valid, it will run, and issues like incompatible types will only surface at runtime. This forces the developer to ensure there is error handling in place to deal with such errors, and even with this, a common best practice is to use &lt;a class="link" href="https://docs.python.org/3/library/typing.html" target="_blank" rel="noopener"
>type hints&lt;/a> combined with third-party linting tools to try to stay on top of issues like this.&lt;/p>
&lt;p>Generics in my opinion is a programming stype for statically typed languages brought into python via type hints.&lt;/p>
&lt;h2 id="some-code-with-comments">Some code with comments
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">from prometheus_client import Counter as _PromCounter
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">from prometheus_client import Histogram as _PromHistogram
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">from typing import TypeVar, Generics
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># a new generic type, bound to two types
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_MetricsTypeT = TypeVar(&amp;#39;_MetricsTypeT&amp;#39;, bound=[_PromCounter, _PromHistogram])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># base class of type generic(child class to pass type in)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class _MetricsBase(Generic[_MetricsTypeT]):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def __init__(self, label_names: Iterable[str]):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.default_labels: Dict[str] = get_default_labels()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.all_label_names: list = list(label_names) + list(self.default_labels.keys())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self._parent_metric: _MetricsTypeT = None
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # Provides the label functionality
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def labels(self, *labelargs, **labelkwargs) -&amp;gt; _MetricsTypeT:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if labelargs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> labelargs += tuple(self.default_labels.values())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return cast(_MetricsTypeT, self._parent_metric.labels(*labelargs))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> labelkwargs.update(self.default_labels)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return cast(_MetricsTypeT, self._parent_metric.labels(**labelkwargs))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># child class passing in type to base class via generics
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class Counter(_MetricsBase[_PromCounter]):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def __init__(self, name, documentation, labelnames=()):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> super().__init__(label_names=labelnames)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self._parent_metric = _PromCounter(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name=name, documentation=documentation,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> labelnames=self.all_label_names)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Complete code &lt;a class="link" href="https://github.com/hash167/prom_client_generics/" target="_blank" rel="noopener"
>here&lt;/a>&lt;/p>
&lt;h2 id="the-final-world">The final world
&lt;/h2>&lt;p>In my project, I used generics programing to type my base class. My base clase _MetricsBase accepts a Generic type, passed in by classes(Counter, Histogram) inheritering from it. The common method label returns the generic type passed in from the child class. When we use third party linters like &lt;a class="link" href="https://github.com/python/mypy" target="_blank" rel="noopener"
>mypy&lt;/a>, we get some of the controll of statically typed languages with python&lt;/p></description></item><item><title>Designing a metrics system notes</title><link>https://hashimcolombowala.com/p/designing-a-metrics-system-notes/</link><pubDate>Fri, 01 Jul 2022 01:33:40 +0000</pubDate><guid>https://hashimcolombowala.com/p/designing-a-metrics-system-notes/</guid><description>&lt;p>To effectively monitor and understand the performance of your applications and infrastructure, having a well-designed metrics system is crucial. Here are the key requirements and components for building a reliable metrics system.&lt;/p>
&lt;h3 id="requirements-for-a-metrics-system">Requirements for a Metrics System
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Multidimensional Data Model&lt;/strong>: The metrics system should support a multidimensional data model that can be sliced and diced along different dimensions as defined by the service (e.g., instance, service, endpoint, method).&lt;/li>
&lt;li>&lt;strong>Operational Simplicity&lt;/strong>: The system should be easy to operate and maintain, minimizing overhead and complexity.&lt;/li>
&lt;li>&lt;strong>Scalable Data Collection&lt;/strong>: The system must support scalable data collection and offer a decentralized architecture, allowing independent teams to set up their own monitoring servers.&lt;/li>
&lt;li>&lt;strong>Powerful Query Language&lt;/strong>: A powerful query language should be available to leverage the data model for alerting and graphing, enabling precise insights into system performance.&lt;/li>
&lt;/ul>
&lt;h3 id="client-libraries">Client Libraries
&lt;/h3>&lt;p>Client libraries play an essential role in the metrics system:&lt;/p>
&lt;ul>
&lt;li>They handle details like thread safety, bookkeeping, and producing the Prometheus text exposition format in response to HTTP requests.&lt;/li>
&lt;li>Since metrics-based monitoring doesn&amp;rsquo;t track individual events, client library memory usage doesn&amp;rsquo;t increase with more events. Instead, memory usage depends on the number of metrics being tracked.&lt;/li>
&lt;/ul>
&lt;h3 id="instrumentation">Instrumentation
&lt;/h3>&lt;p>To effectively monitor different types of services, appropriate instrumentation methods must be used. Here are three common types of services and how they should be instrumented:&lt;/p>
&lt;h4 id="online-serving-systems">Online-Serving Systems
&lt;/h4>&lt;p>For online-serving systems, such as web services, the &lt;strong>RED Method&lt;/strong> is used. This method involves tracking:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Requests&lt;/strong>: The count of incoming requests.&lt;/li>
&lt;li>&lt;strong>Errors&lt;/strong>: The count of failed requests.&lt;/li>
&lt;li>&lt;strong>Duration&lt;/strong>: The latency or response time of requests.&lt;/li>
&lt;/ul>
&lt;p>For example, a cache might track these metrics for both overall performance and for cache misses that need to be recalculated or fetched from a backend.&lt;/p>
&lt;h4 id="offline-serving-systems">Offline-Serving Systems
&lt;/h4>&lt;p>Offline-serving systems, such as log processors, usually batch up work and consist of multiple stages in a pipeline with queues in between. These systems run continuously, which distinguishes them from batch jobs. The &lt;strong>USE Method&lt;/strong> is used for these types of systems:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Utilization&lt;/strong>: How much of the system&amp;rsquo;s capacity is in use (e.g., how much work is in progress).&lt;/li>
&lt;li>&lt;strong>Saturation&lt;/strong>: The amount of queued work and how much work is currently being processed.&lt;/li>
&lt;li>&lt;strong>Errors&lt;/strong>: Any errors encountered during processing.&lt;/li>
&lt;/ul>
&lt;h4 id="batch-jobs">Batch Jobs
&lt;/h4>&lt;p>Batch jobs are processes that run at scheduled intervals. The key metrics for batch jobs include:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Run Time&lt;/strong>: How long it took for the job to complete.&lt;/li>
&lt;li>&lt;strong>Stage Duration&lt;/strong>: How long each stage of the job took to complete.&lt;/li>
&lt;li>&lt;strong>Success Time&lt;/strong>: The time at which the job last succeeded.&lt;/li>
&lt;/ul>
&lt;p>Alerts can be set for when the job hasn&amp;rsquo;t succeeded within a certain time frame.&lt;/p>
&lt;p>&lt;strong>Idempotency for Batch Jobs&lt;/strong>: Idempotency is an important concept for batch jobs. It means that performing an operation more than once has the same effect as performing it only once, which is crucial for reliability and preventing unintended side effects.&lt;/p></description></item></channel></rss>