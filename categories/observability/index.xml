<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Observability on Hashim Colombowala</title><link>https://hashimcolombowala.com/categories/observability/</link><description>Recent content in Observability on Hashim Colombowala</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 09 Oct 2024 21:00:00 -0700</lastBuildDate><atom:link href="https://hashimcolombowala.com/categories/observability/index.xml" rel="self" type="application/rss+xml"/><item><title>Another Off-by-One (Mostly) Problem and Prometheus Counter Spikes</title><link>https://hashimcolombowala.com/p/another-off-by-one-mostly-problem-and-prometheus-counter-spikes/</link><pubDate>Wed, 09 Oct 2024 21:00:00 -0700</pubDate><guid>https://hashimcolombowala.com/p/another-off-by-one-mostly-problem-and-prometheus-counter-spikes/</guid><description>&lt;h3 id="the-problem">The Problem
&lt;/h3>&lt;p>We have observed several Prometheus counters showing false spikes (i.e., no matching increase in logs) that could correlate with nodes experiencing kernel panics and reboots.&lt;/p>
&lt;h3 id="why-do-counters-spike">Why Do Counters Spike?
&lt;/h3>&lt;p>In Prometheus, counters are expected to be monotonic: they can never decrease. The only time a counter timeseries can decrease is if it is reset to zero (e.g., when a container restarts).&lt;/p>
&lt;p>The PromQL functions &lt;code>increase()&lt;/code> and &lt;code>rate()&lt;/code> have special logic to handle counter resets like this. If a counter has a value of 100 and the next data point is 99, it is assumed that the timeseries was first reset to 0 and then incremented 99 more times. This would cause a jump of 99 in most graphs.&lt;/p>
&lt;p>&lt;img src="https://hashimcolombowala.com/p/another-off-by-one-mostly-problem-and-prometheus-counter-spikes/graph.png"
width="1492"
height="513"
srcset="https://hashimcolombowala.com/p/another-off-by-one-mostly-problem-and-prometheus-counter-spikes/graph_hu10347298088471375106.png 480w, https://hashimcolombowala.com/p/another-off-by-one-mostly-problem-and-prometheus-counter-spikes/graph_hu2622312036944885573.png 1024w"
loading="lazy"
alt="Graph"
class="gallery-image"
data-flex-grow="290"
data-flex-basis="698px"
>&lt;/p>
&lt;h3 id="background">Background
&lt;/h3>&lt;ul>
&lt;li>Our Python app is running on a Gunicorn server with multiple workers. This means multiple Python processes are serving requests because Python&amp;rsquo;s threading is restricted by the Global Interpreter Lock (GIL). Using multiprocessing is a good workaround.&lt;/li>
&lt;li>The app is running on a pod on a Kubernetes node.&lt;/li>
&lt;li>This app is instrumented with the Prometheus Python client in multiprocessing mode because each worker process runs independently and maintains separate metrics. Multiprocessing mode aggregates these metrics across all workers, ensuring that Prometheus scrapes produce accurate, unified data across the entire application, reflecting all requests handled by all workers.&lt;/li>
&lt;li>In multiprocessing mode, each process writes its metrics to a separate &lt;a class="link" href="https://github.com/prometheus/client_python/blob/v0.12.0/prometheus_client/mmap_dict.py#L61-L69" target="_blank" rel="noopener"
>set of mmapped files&lt;/a>. On scrape, the exporter web server reads all of these files and merges them (i.e., counters from process A and B are summed). In our Kubernetes setup, these files are stored in &lt;code>/tmp&lt;/code>, which is mounted as a Kubernetes &lt;code>emptyDir&lt;/code> volume in most of our workloads.&lt;/li>
&lt;/ul>
&lt;h3 id="how-are-reboots-causing-spikes">How Are Reboots Causing Spikes?
&lt;/h3>&lt;p>&lt;a class="link" href="https://kubernetes.io/docs/concepts/storage/volumes/#emptydir" target="_blank" rel="noopener"
>It turns out the &lt;code>emptyDir&lt;/code> mounted to &lt;code>/tmp&lt;/code> persists across container crashes&lt;/a>.&lt;/p>
&lt;p>We were able to exec into a pod that experienced a node reboot and confirmed that the filesystem timestamps in the metric files predated the node reboot by several days.&lt;/p>
&lt;p>&lt;img src="https://hashimcolombowala.com/p/another-off-by-one-mostly-problem-and-prometheus-counter-spikes/shell.png"
width="1600"
height="1303"
srcset="https://hashimcolombowala.com/p/another-off-by-one-mostly-problem-and-prometheus-counter-spikes/shell_hu13800648201417889505.png 480w, https://hashimcolombowala.com/p/another-off-by-one-mostly-problem-and-prometheus-counter-spikes/shell_hu6015823213156503612.png 1024w"
loading="lazy"
alt="Shell"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="294px"
>&lt;/p>
&lt;p>&lt;strong>This means that after a reboot, pods are coming back with their old counter values&lt;/strong>. This would normally be fine as long as the node is not down for too long—the counter would just resume at the previous value and see no reset, as long as it hasn&amp;rsquo;t fallen out of the backend aggregator&amp;rsquo;s buffer (which has a 10-minute window in our setup).&lt;/p>
&lt;p>In the backend, we drilled into the raw data points for the counter during one of the spikes and noticed it was incrementing and then decrementing by exactly one:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">TIMESTAMP&lt;/th>
&lt;th style="text-align: left">VALUE&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">2024-09-23T05:05:05.37-04:00&lt;/td>
&lt;td style="text-align: left">72929&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">2024-09-23T05:05:35.37-04:00&lt;/td>
&lt;td style="text-align: left">72929&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">2024-09-23T05:06:05.37-04:00&lt;/td>
&lt;td style="text-align: left">72930&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">2024-09-23T05:06:35.371-04:00&lt;/td>
&lt;td style="text-align: left">72930&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">2024-09-23T05:07:05.371-04:00&lt;/td>
&lt;td style="text-align: left">72932&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">2024-09-23T05:07:35.37-04:00&lt;/td>
&lt;td style="text-align: left">72932&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">2024-09-23T05:08:05.37-04:00&lt;/td>
&lt;td style="text-align: left">72933&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">2024-09-23T05:10:59.487-04:00&lt;/td>
&lt;td style="text-align: left">72932 &lt;code>(decrease in counter)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">2024-09-23T05:11:29.496-04:00&lt;/td>
&lt;td style="text-align: left">72932&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">2024-09-23T05:11:59.5-04:00&lt;/td>
&lt;td style="text-align: left">72932&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">2024-09-23T05:12:29.489-04:00&lt;/td>
&lt;td style="text-align: left">72932&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="sequence-of-events">Sequence of Events
&lt;/h3>&lt;ol>
&lt;li>The application process increments a counter from &lt;em>n&lt;/em> to &lt;em>n+1&lt;/em> and writes the value to the mmapped file. This writes to the Linux kernel&amp;rsquo;s page cache (and is not immediately flushed to disk).&lt;/li>
&lt;li>A scrape occurs. The multiprocess exporter opens and reads all files. The kernel sees some of the files are already in the page cache and skips reading them from disk. The scrape exports the counter as &lt;em>n+1&lt;/em>.&lt;/li>
&lt;li>A kernel panic happens before the page cache is flushed to disk. The counter increment is lost.&lt;/li>
&lt;li>The node encounters a kernel panic and reboots. Since the shutdown was not graceful, pods remain assigned to the node, so after startup containers are restarted with the same pod names, etc. Since the pod name is the same, the &lt;code>emptyDir&lt;/code> volume is reused, and the pod keeps the last counter value that was flushed to disk (&lt;em>n&lt;/em>).&lt;/li>
&lt;li>A scrape occurs, and we export the counter with a value of &lt;em>n&lt;/em>. Prometheus queries run &lt;code>increase([..., n+1, n])&lt;/code>, which is interpreted as an increase of &lt;em>n&lt;/em>, causing a spike.&lt;/li>
&lt;/ol>
&lt;p>However, we have not attempted to reproduce this behavior to confirm this theory. Since this depends on the timing of the kernel writing the dirty page to disk and the kernel panic, it also makes sense that we would not see this behavior consistently with node restarts.&lt;/p>
&lt;h3 id="how-can-we-fix-it">How Can We Fix It?
&lt;/h3>&lt;p>While a fix for the node reboot issue has been identified, we can be more robust here. The simplest solution is to clear out the metric files in &lt;code>/tmp&lt;/code> on startup. Prometheus is designed for this—counter resets are normal.&lt;/p>
&lt;ol>
&lt;li>We could set the Prometheus multiproc directory to a memory-backed &lt;code>emptyDir&lt;/code> volume (&lt;code>emptyDir.medium: Memory&lt;/code>). This would naturally be cleared on node restart. This would make writes count against container memory instead.&lt;/li>
&lt;li>We could add an init container that runs &lt;code>rm $PROMETHEUS_MULTIPROC_DIR/*.db&lt;/code> on startup. This might impact pod start time slightly but is the simplest solution.&lt;/li>
&lt;li>We could make the application delete &lt;code>$PROMETHEUS_MULTIPROC_DIR/*.db&lt;/code> on startup.&lt;/li>
&lt;/ol>
&lt;h3 id="conclusion">Conclusion
&lt;/h3>&lt;p>So here we have it. An off-by-one (decrement to the count) can lead to an increment of 99. Who would have thought.&lt;/p></description></item><item><title>Designing a metrics system notes</title><link>https://hashimcolombowala.com/p/designing-a-metrics-system-notes/</link><pubDate>Fri, 01 Jul 2022 01:33:40 +0000</pubDate><guid>https://hashimcolombowala.com/p/designing-a-metrics-system-notes/</guid><description>&lt;p>To effectively monitor and understand the performance of your applications and infrastructure, having a well-designed metrics system is crucial. Here are the key requirements and components for building a reliable metrics system.&lt;/p>
&lt;h3 id="requirements-for-a-metrics-system">Requirements for a Metrics System
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Multidimensional Data Model&lt;/strong>: The metrics system should support a multidimensional data model that can be sliced and diced along different dimensions as defined by the service (e.g., instance, service, endpoint, method).&lt;/li>
&lt;li>&lt;strong>Operational Simplicity&lt;/strong>: The system should be easy to operate and maintain, minimizing overhead and complexity.&lt;/li>
&lt;li>&lt;strong>Scalable Data Collection&lt;/strong>: The system must support scalable data collection and offer a decentralized architecture, allowing independent teams to set up their own monitoring servers.&lt;/li>
&lt;li>&lt;strong>Powerful Query Language&lt;/strong>: A powerful query language should be available to leverage the data model for alerting and graphing, enabling precise insights into system performance.&lt;/li>
&lt;/ul>
&lt;h3 id="client-libraries">Client Libraries
&lt;/h3>&lt;p>Client libraries play an essential role in the metrics system:&lt;/p>
&lt;ul>
&lt;li>They handle details like thread safety, bookkeeping, and producing the Prometheus text exposition format in response to HTTP requests.&lt;/li>
&lt;li>Since metrics-based monitoring doesn&amp;rsquo;t track individual events, client library memory usage doesn&amp;rsquo;t increase with more events. Instead, memory usage depends on the number of metrics being tracked.&lt;/li>
&lt;/ul>
&lt;h3 id="instrumentation">Instrumentation
&lt;/h3>&lt;p>To effectively monitor different types of services, appropriate instrumentation methods must be used. Here are three common types of services and how they should be instrumented:&lt;/p>
&lt;h4 id="online-serving-systems">Online-Serving Systems
&lt;/h4>&lt;p>For online-serving systems, such as web services, the &lt;strong>RED Method&lt;/strong> is used. This method involves tracking:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Requests&lt;/strong>: The count of incoming requests.&lt;/li>
&lt;li>&lt;strong>Errors&lt;/strong>: The count of failed requests.&lt;/li>
&lt;li>&lt;strong>Duration&lt;/strong>: The latency or response time of requests.&lt;/li>
&lt;/ul>
&lt;p>For example, a cache might track these metrics for both overall performance and for cache misses that need to be recalculated or fetched from a backend.&lt;/p>
&lt;h4 id="offline-serving-systems">Offline-Serving Systems
&lt;/h4>&lt;p>Offline-serving systems, such as log processors, usually batch up work and consist of multiple stages in a pipeline with queues in between. These systems run continuously, which distinguishes them from batch jobs. The &lt;strong>USE Method&lt;/strong> is used for these types of systems:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Utilization&lt;/strong>: How much of the system&amp;rsquo;s capacity is in use (e.g., how much work is in progress).&lt;/li>
&lt;li>&lt;strong>Saturation&lt;/strong>: The amount of queued work and how much work is currently being processed.&lt;/li>
&lt;li>&lt;strong>Errors&lt;/strong>: Any errors encountered during processing.&lt;/li>
&lt;/ul>
&lt;h4 id="batch-jobs">Batch Jobs
&lt;/h4>&lt;p>Batch jobs are processes that run at scheduled intervals. The key metrics for batch jobs include:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Run Time&lt;/strong>: How long it took for the job to complete.&lt;/li>
&lt;li>&lt;strong>Stage Duration&lt;/strong>: How long each stage of the job took to complete.&lt;/li>
&lt;li>&lt;strong>Success Time&lt;/strong>: The time at which the job last succeeded.&lt;/li>
&lt;/ul>
&lt;p>Alerts can be set for when the job hasn&amp;rsquo;t succeeded within a certain time frame.&lt;/p>
&lt;p>&lt;strong>Idempotency for Batch Jobs&lt;/strong>: Idempotency is an important concept for batch jobs. It means that performing an operation more than once has the same effect as performing it only once, which is crucial for reliability and preventing unintended side effects.&lt;/p></description></item></channel></rss>