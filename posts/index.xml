<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Posts on Home</title><link>https://hashimcolombowala.com/posts/</link><description>Recent content in Posts on Home</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>hashim@hey.com (Hashim Colombowala)</managingEditor><webMaster>hashim@hey.com (Hashim Colombowala)</webMaster><copyright>Â©2024, All Rights Reserved</copyright><lastBuildDate>Mon, 07 Oct 2024 23:00:00 +0000</lastBuildDate><atom:link href="https://hashimcolombowala.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>What is flink and why should we care about it</title><link>https://hashimcolombowala.com/posts/2024-10-08-kafka-flink/</link><pubDate>Mon, 07 Oct 2024 23:00:00 +0000</pubDate><author>hashim@hey.com (Hashim Colombowala)</author><atom:modified>Mon, 07 Oct 2024 23:00:00 +0000</atom:modified><guid>https://hashimcolombowala.com/posts/2024-10-08-kafka-flink/</guid><description>Overview Recently, the observability team was tasked with a latency reporting project. The key features included:
Daily and monthly latency aggregations Support for various quantiles A reasonable data delay SLO (24 hours) and more.</description><dc:creator>Hashim Colombowala</dc:creator><category>flink</category><category>kotlin</category></item><item><title>Learning Generics by extending the prometheus python client</title><link>https://hashimcolombowala.com/posts/generics/</link><pubDate>Sat, 02 Jul 2022 14:30:00 +0000</pubDate><author>hashim@hey.com (Hashim Colombowala)</author><atom:modified>Sat, 02 Jul 2022 14:30:00 +0000</atom:modified><guid>https://hashimcolombowala.com/posts/generics/</guid><description>Background Imagine you&amp;rsquo;re writing a library to extend the prometheus python client and you needed to add some dynamic labels specific to the environment. Ideally you would add most of your labels at the collector end and avoid writing extensions.</description><dc:creator>Hashim Colombowala</dc:creator><category>python</category><category>o11y</category></item><item><title>Designing a metrics system notes</title><link>https://hashimcolombowala.com/posts/metrics/</link><pubDate>Fri, 01 Jul 2022 01:33:40 +0000</pubDate><author>hashim@hey.com (Hashim Colombowala)</author><atom:modified>Fri, 01 Jul 2022 01:33:40 +0000</atom:modified><guid>https://hashimcolombowala.com/posts/metrics/</guid><description>Requirements for metrics system Multidimensional data model which can be sliced and diced along different dimensions as defined by the service(example: instance, service, endpoint, method) Operational simplicity Scalable data collection and decentralized architecture, so that independent teams can setup independent monitoring servers A powerful query language that leverages the data model for alerting and graphing Client libraries Client libraries take care of all the nitty gritty details like thread-safety, bookkeeping and producing the Prometheus text exposition format in response to HTTP request.</description><dc:creator>Hashim Colombowala</dc:creator><category>python</category><category>o11y</category></item><item><title>Authentication - Session or Token?</title><link>https://hashimcolombowala.com/posts/auth/</link><pubDate>Fri, 18 Jun 2021 12:33:40 +0000</pubDate><author>hashim@hey.com (Hashim Colombowala)</author><atom:modified>Fri, 18 Jun 2021 12:33:40 +0000</atom:modified><guid>https://hashimcolombowala.com/posts/auth/</guid><description>This post will compare and contrast two most common authentication techniques breifly.
Session Based Authentication In this scenario, the server will create a session for the user after the user logs in.</description><dc:creator>Hashim Colombowala</dc:creator><category>python</category></item><item><title>Signalling docker containers</title><link>https://hashimcolombowala.com/posts/signal/</link><pubDate>Wed, 27 Jan 2021 01:33:40 +0000</pubDate><author>hashim@hey.com (Hashim Colombowala)</author><atom:modified>Wed, 27 Jan 2021 01:33:40 +0000</atom:modified><guid>https://hashimcolombowala.com/posts/signal/</guid><description>When deploying a containerized application to a container management system like AWS Fargate, you tend to run your application from a shell script. Suppose your script looks like this</description><dc:creator>Hashim Colombowala</dc:creator><category>python</category><category>docker</category></item><item><title>Abstract classes using Metaclasses</title><link>https://hashimcolombowala.com/posts/2020-12-28-python-metaclasses/</link><pubDate>Mon, 28 Dec 2020 01:33:40 +0000</pubDate><author>hashim@hey.com (Hashim Colombowala)</author><atom:modified>Mon, 28 Dec 2020 01:33:40 +0000</atom:modified><guid>https://hashimcolombowala.com/posts/2020-12-28-python-metaclasses/</guid><description>In python3 all classes are new style classes, thus it is reasonable to refer to an objects type and its class interchangably
Type and Class 1 2 3 4 5 6 7 class Foo: pass &amp;gt;&amp;gt;&amp;gt; type(Foo) &amp;lt;class &amp;#39;type&amp;#39;&amp;gt; Type is a metaclass of which classes are instances</description><dc:creator>Hashim Colombowala</dc:creator><category>python</category></item><item><title>The Go Spec(compiling)</title><link>https://hashimcolombowala.com/posts/2020-06-20-the-go-spec/</link><pubDate>Sat, 20 Jun 2020 16:00:00 +0000</pubDate><author>hashim@hey.com (Hashim Colombowala)</author><atom:modified>Sat, 20 Jun 2020 16:00:00 +0000</atom:modified><guid>https://hashimcolombowala.com/posts/2020-06-20-the-go-spec/</guid><description>The Go compiler can compile the Go source go with different go specs. Fo example, if you have installed go 1.14, you can compile your source with Go spec 1.</description><dc:creator>Hashim Colombowala</dc:creator><category>go</category></item><item><title>The Zen of Python</title><link>https://hashimcolombowala.com/posts/2020-04-17-zen-of-python/</link><pubDate>Tue, 07 Apr 2020 18:54:00 +0000</pubDate><author>hashim@hey.com (Hashim Colombowala)</author><atom:modified>Tue, 07 Apr 2020 18:54:00 +0000</atom:modified><guid>https://hashimcolombowala.com/posts/2020-04-17-zen-of-python/</guid><description>Words of wisdom from the python interactive shell. Always good to read it once in a while and appreciate the zen of python.
Open the python interpretor and enter import this</description><dc:creator>Hashim Colombowala</dc:creator></item></channel></rss>